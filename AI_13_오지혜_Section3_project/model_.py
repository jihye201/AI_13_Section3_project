# -*- coding: utf-8 -*-
"""유기동물프로젝.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YcF6YH2DaLAkbE5kvROxomwi7F-FpxMI
"""







import pandas as pd
import seaborn as sns
from category_encoders import OneHotEncoder
#impute는 안함 이미 결측치 제거 완
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import plot_confusion_matrix
import matplotlib.pyplot as plt

import joblib

df = pd.read_csv('/Users/ojihye/Desktop/animal_center/Austin_Animal_Center_Outcomes.csv',encoding='cp949')


# Id, 이름 삭제, 입소 날짜 지움,태어난 날 지움
df= df.drop([df.columns[0],df.columns[1],df.columns[2],df.columns[3],df.columns[4]],axis =1)




df= df.dropna()



# Year 있는거 찾아서 바꿔주기
year = df['Age upon Outcome'][df['Age upon Outcome'].str.contains('year','years')]
# month 있는거 찾아서 자꿔주기
month = df['Age upon Outcome'][df['Age upon Outcome'].str.contains('month','months')]
#week
week = df['Age upon Outcome'][df['Age upon Outcome'].str.contains('week','weeks')]
#day
day = df['Age upon Outcome'][df['Age upon Outcome'].str.contains('day','days')]

year

year=year.str.split(' ').str[0]
year= pd.to_numeric(year)
year

month=month.str.split(' ').str[0]
month= pd.to_numeric(month)
month = month * 0.083
month

week=week.str.split(' ').str[0]
week= pd.to_numeric(week)
week = week * 0.02
week

day= day.str.split(' ').str[0]
day= pd.to_numeric(day)
day= day*0


a=pd.concat([year,month,week,day])

a = a.sort_index()

df['Age upon Outcome'] =a

df.iloc[1,4]

# 나이에서 one hot 인코딩 범주가 너무 많다
# 나이를 세개의 범주로 나누자

num=0
for i in df['Age upon Outcome']:
  if i<=0:
    df.iloc[num,4]= "under age 1"
    num=num+1
  elif (i>=1) & (i<=5):
    df.iloc[num,4]="under age 5"
    num=num+1
  else:
    df.iloc[num,4]="over age 5"
    num=num+1

model_df = df[df['Animal Type'].str.contains('Cat','Dog')]



"""### 머신 러닝 시작

1. 결측치 다시 확인, 각 피쳐 숫자로 조작
2. featrue- outcome subtype,age upon outcome, Breed, color
  target- outcome type
3. train, test 나누기
4. xgboost 사용



"""


model_df.isnull().sum()


target = 'Outcome Type'


#고양이
#훈련/테스트 나누기
train, test = train_test_split(model_df, test_size=0.3, random_state=2)
X_train = train.drop(['Outcome Type'], axis=1)
X_test = test.drop(['Outcome Type'], axis=1)
y_train = train['Outcome Type']
y_test = test['Outcome Type']

#검증데이터 나눔
train, val = train_test_split(train, train_size=0.70, test_size=0.30, stratify=train[target], random_state=2)
X_val=val.drop(['Outcome Type'],axis=1)
y_val = val[target]
type(X_test)
pipe_model = make_pipeline(
    OneHotEncoder(), 
    StandardScaler(), 
    XGBClassifier()
)
pipe_model.fit(X_train, y_train)

print('검증세트 정확도', pipe_model.score(X_val, y_val))

y_pred = pipe_model.predict(X_test)

print(f"테스트 데이터 정확도",accuracy_score(y_test, y_pred))

fig,ax= plt.subplots()
pcm = plot_confusion_matrix(pipe_model,X_test,y_test,cmap=plt.cm.Blues,ax=ax)

plt.title(f'Confusion matrix, n = {len(y_test)}', fontsize= 15)
plt.show()

joblib.dump(pipe_model, '../animal_center/model_animal.pkl')